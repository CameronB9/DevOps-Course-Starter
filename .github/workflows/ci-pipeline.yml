name: Continuous Integration
on:
  pull_request:
    paths-ignore:
      - 'README.md'
      - '.gitignore'
      - '.env.template'
      - '.env.j2'
  push:    
    paths-ignore:
      - 'README.md'
      - '.gitignore'
      - '.env.template'
      - '.env.j2'
  schedule:
    - cron: '08 13 * * *'

jobs:
  build:
    name: Build and test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Run unit and integration tests
        run: docker-compose -f docker-compose.test-ci.yml run test-ci
        if: github.event.schedule != '08 13 * * *'
      - name: Run e2e tests
        run: | 
          docker-compose -f docker-compose.test-ci.yml run \ 
          -e FLASK_ENV=docker \ 
          -e SECRET_KEY=${{ secrets.SECRET_KEY }} \ 
          -e MONGO_CONNECTION_STRING=${{ secrets.MONGO_CONNECTION_STRING }} \ 
          -e MONGO_DATABASE_NAME=${{ secrets.MONGO_DATABASE_NAME }} \ 
          e2e-ci
        if: github.event.schedule != '08 13 * * *'
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python-3.10@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      - name: Send custom JSON data to Slack workflow
        id: slack
        uses: slackapi/slack-github-action@v1.24.0
        with:
          # For posting a rich message using Block Kit
          payload: |
            {
              "text": "GitHub Action build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "GitHub Action build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
        if: ${{ always() }}
  publish:
    name: Publish to Docker Hub and deploy to Azure
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && github.event.schedule != '08 13 * * *'
    steps:
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      -
        name: Build and push
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/todo-app:prod
          target: production
      -
        name: Publish to Azure
        run: curl -dH -X POST '${{ secrets.AZURE_WEBHOOK_URL }}'

      